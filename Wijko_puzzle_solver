"""Wijuko Puzzle Solver in Python

This program is coded in in Python to solve Wijuko grid puzzle
Place 1-9 in the grid, obeying constraints for the sums between pairs of squares.
Here's the template, where X is the number 1..9 in the  square to be found. c1,c2,..,c12 are constraint numbers given that numbers in the squares at two sides of it (vertical or horizontal) add up to that constraint number

The other constraints are that every number 1..9 is to be used once and all cells 1..9 are filled with one number.

   X c1  X c2  X
   c3    c4    c5
   X c6  X c7  X
   c8    c9    c10
   X c11 X c12 X 

 See Martin J. Chlond: "Puzzle - IP in the I"
 http://pubsonline.informs.org/doi/pdf/10.1287/ited.2015.0142

The program has two options for input: user may decide to enter the constraints manually or may use the default constraint list hard-coded into it.

The hard-coded input, defined from the problem instance from Chlond's article is:

 "0,7,12,8,13,0,14,7,0,15,0,0"

For the following puzzle:

    X  _  X    7  X   

   12     8   13    

    X  _  X   14  X

    7     _       15

    X  _  X   _    X 

The program finds the solution to this problem as:

    9     2    5

    3     6    8

    4     1    7


Another example set of constraints that can be entered is:  

	9,7,10,8,0,0,0,0,0,9,13,10

   Solution should be:

    7     2    5

    3     6    8

    4     9    1
Hereâ€™s the code:
"""

import ast
import sys
from itertools import permutations  # from the itertools library we'll use permutations function
                                    # see >>> help(itertools.permutations) for docstring 
fcellr = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1 ,2 ,2] #first cell row for constraints
fcellc = [0, 1, 0, 1, 2, 0, 1, 0, 1, 2 ,0 ,1] #first cell column for constraints
scellr = [0, 0, 1, 1, 1, 1, 1, 2, 2, 2 ,2 ,2] #second cell row for constraints
scellc = [1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1 ,2] #second cell column for constraints

def cons_check (num_t, cons_t): #function for constraint check
    result=0
    a=0
    while (result == 0 and a < 12):
            if cons_t[a] * (num_t[fcellr[a]][fcellc[a]] + num_t  [scellr[a]][scellc[a]]-cons_t[a]) != 0: # if cons_t[a] is zero the check doesn't take place
                result=a+1 # failed constraint is index a plus 1 
                break # check for constraint a failed therefore break the while loop, no need to check the other constraints   
            else:
                result = 0 # the check for constraint a is successful
                a=a+1 # increase the count and do the next check
    return result # the function returns 0 if successful, constraint number if failed 

ans1 = input("would you like to enter the constraints? (yes/no)")
if ans1=="yes" :
        print ("please follow the instructions below to enter the constraints for 3x3 wijuko in the given format:")
        print ("where X's are digits 1..9 of  the solution,")
        print ("c1,c2,c6,c7,c11,c12 are row constraints and")
        print ("c3,c4,c5,c8,c9,c10 are the column constraints in the following puzzle:")
        print ("X  c1 X  c2 X   ")
        print ("c3    c4    c5  ")
        print ("X  c6 X  c7 X   ")
        print ("c8    c9    c10 ")
        print ("X  c11 X  c12 X  ")
        print ("**** please enter 0 (zero) for unknown constraints ***")
        print ("ex:  given the puzzle below")
        print ("X  _   X  7  X    first row ")
        print ("12     8     13   first constraints for columns")
        print ("X  _   X  14 X    second row ")
        print ("7      _     15   second constraints for columns")
        print ("X  _   X  _  X    third row ")
        print ( " ex: enter 0,7,12,8,13,0,14,7,0,15,0,0 for the constraints")
        constraints = input("please enter the constraints c1,..,c12:> ")
else:
        print ("where X's are digits 1..9 of  the solution,")
        print ("c1,c2,c6,c7,c11,c12 are row constraints and")
        print ("c3,c4,c5,c8,c9,c10 are the column constraints in the following puzzle:")
        print ("X  c1 X  c2 X   ")
        print ("c3    c4    c5  ")
        print ("X  c6 X  c7 X   ")
        print ("c8    c9    c10 ")
        print ("X  c11 X  c12 X  ")
        print ("ex:  given the puzzle below")
        print ("X  _   X  7  X    first row ")
        print ("12     8     13   first constraints for columns")
        print ("X  _   X  14 X    second row ")
        print ("7      _     15   second constraints for columns")
        print ("X  _   X  _  X    third row ")
        print ( " ex: the constraints are 0,7,12,8,13,0,14,7,0,15,0,0")
        constraints

cons_list = constraints.split (",")
cons_tab = list(map(int,cons_list))
solution_not_found=True
for l in list(permutations(range(1,10))):
    num_tab = [[l[0],l[1],l[2]],[l[3],l[4],l[5]],[l[6],l[7],l[8]]]
    if cons_check(num_tab,cons_tab) == 0: # calls the function to check constraints if this permutation is the solution;
        print ("the answer is: ", num_tab) # solution found and printed
        solution_not_found=False
        break # since solution is found, don't complete the rest of the permutations - note: you may wish to remove if all solutions are needed
if solution_not_found: # no solution found at the end of list of permutations
    print ("There's no solution")
